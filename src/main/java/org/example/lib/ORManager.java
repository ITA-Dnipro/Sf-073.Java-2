package org.example.lib;

import org.example.configs.HikariCPDataSource;
import org.example.configs.PropertyConfiguration;

import javax.sql.DataSource;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.stream.Stream;

public interface ORManager {
    static ORManager withPropertiesFrom(String filename) {
        Properties properties = PropertyConfiguration.readPropertiesFromFile(Path.of(filename));
        Connection connection = null;
        try (Connection conn = DriverManager
                .getConnection(properties.getProperty("orm.connection.url"),
                               properties.getProperty("orm.connection.username"),
                               properties.getProperty("orm.connection.password"));) {
            connection = conn;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return new ORManagerImpl(connection);
    }

    static ORManager withDataSource(DataSource dataSource) {
        Connection connection = null;
        try {
            connection = HikariCPDataSource.getHikariDatasourceConfiguration(dataSource).getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return new ORManagerImpl(connection);
    }

    // generate the schema in the DB
    // for given list of org.example.entity classes (and all related
    //  by OneToMany/ManyToOne) create a schema in DB
    void register(Class<?>... entityClasses) throws SQLException, IllegalAccessException;

    // CREATE
    // save a new object to DB, set id if autogenerated
    // or merge into DB if id is present
    <T> T save(T o) throws SQLException;

    // save a new object to DB, set id if autogenerated
    // throw if the object has id already set (except for String)
    void persist(Object o) throws SQLException, IllegalAccessException;

    // READ
    <T> Optional<T> findById(Serializable id, Class<T> cls);

    // READ ALL
    <T> List<T> findAll(Class<T> cls) throws SQLException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException;

    // READ ALL LAZY
    <T> Iterable<T> findAllAsIterable(Class<T> cls); // (MEDIUM)

    <T> Stream<T> findAllAsStream(Class<T> cls);     // (OPTIONAL)

    // UPDATE
    <T> T merge(T o);   // send o -> DB row (to table)

    <T> T refresh(T o); // send o <- DB row (from table)

    // DELETE
    // set autogenerated id to null
    // return true if successfully deleted
    boolean delete(Object o);
}
